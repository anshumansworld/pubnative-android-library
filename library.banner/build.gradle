//==================================================================================================
// PROJECT
//==================================================================================================
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // ANDROID
        classpath classpath_android
        // BINTRAY
        classpath classpath_bintray
        classpath classpath_maven
        // COVERALLS
        classpath classpath_cobertura
        classpath classpath_coveralls
    }
}
task projectInfo << {
    println ""
    println " === ${project.group}:${project.name}:${version} - (${System.getenv("CIRCLE_BUILD_NUM")}) ==="
    println ""
}
//==================================================================================================
// ANDROID
//==================================================================================================
apply plugin: 'com.android.library'
android {
    compileSdkVersion android_compileSdkVersion
    buildToolsVersion android_buildToolsVersion

    defaultConfig {
        minSdkVersion android_minSdkVersion
        targetSdkVersion android_targetSdkVersion
        versionCode System.getenv("CIRCLE_BUILD_NUM") ? System.getenv("CIRCLE_BUILD_NUM").toInteger() : 1
        versionName project.version ?: "BETA"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}
dependencies {
    compile project(path: ':library')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // JVM tests
    testCompile 'junit:junit:4.12'
    testCompile 'com.squareup.assertj:assertj-android:1.0.0'
    testCompile 'org.robolectric:robolectric:3.1.2'
    testCompile 'org.mockito:mockito-core:2.1.0'
}
if (System.getenv("CIRCLECI")) {
//==================================================================================================
// COVERALLS
//==================================================================================================
    apply plugin: "net.saliman.cobertura"
    apply plugin: "com.github.kt3k.coveralls"
    cobertura.coverageFormats = ['html', 'xml']
//==================================================================================================
// BINTRAY
//==================================================================================================
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.github.dcendents.android-maven'
    install {
        repositories.mavenInstaller {
            // This generates POM.xml with proper parameters
            pom {
                project {
                    packaging 'aar'
                    name project.name
                    description "Predefined banner for PubNative's Android Library"
                    url "http://www.pubnative.net"
                    licenses {
                        license {
                            name "MIT"
                            url "https://opensource.org/licenses/MIT"
                        }
                    }
                    developers {
                        developer {
                            id "cerberillo"
                            name "David Martin"
                            email "david@martinmacias.com"
                        }
                    }
                    scm {
                        connection "${global_repository}.git"
                        developerConnection "${global_repository}.git"
                        url global_repository
                    }
                }
            }
        }
    }
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }
    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.rootProject.files(android.getBootClasspath().join(File.pathSeparator))
        options.memberLevel = JavadocMemberLevel.PUBLIC
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives javadocJar
        archives sourcesJar
    }
    bintray {
        user = System.getenv("BINTRAY_USER")
        key = System.getenv("BINTRAY_API_KEY")
        pkg {
            configurations = ['archives']
            userOrg = 'pubnative'
            repo = 'maven'
            name = project.name
            version {
                name = project.version ?: "BETA"
                vcsTag = project.version ?: "BETA"
            }
        }
    }

//==================================================================================================
// JAR
//==================================================================================================
    task createJar(type: Copy) {
        from('build/intermediates/bundles/release/')
        into("${System.getenv("CIRCLE_ARTIFACTS")}/")
        include('classes.jar')
        rename('classes.jar', "${project.name}_${version}.jar")
    }

    task deleteJar(type: Delete) {
        delete "${System.getenv("CIRCLE_ARTIFACTS")}/${project.name}_${version}.jar"
    }

    createJar.dependsOn(deleteJar, build)
}
